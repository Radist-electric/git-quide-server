const express = require('express')
const router = express.Router()

const data = {
  gitInit: [
    {
      command: 'git init',
      input: [],
      description: 'Инициализация пустого Git-репозитория в текущей папке. Создаётся скрытая папка .git со стартовым набором рабочих файлов и папок.'
    },
    {
      command: 'git init [folder_name]',
      input: [
        'Имя папки'
      ],
      description: 'В текущей папке создаётся новая папка с именем [input]. В ней происходит инициализация пустого Git-репозитория, т.е. создаётся скрытая папка .git со стартовым набором рабочих файлов и папок.'
    },
    {
      command: 'git init --bare',
      input: [],
      description: 'Создаётся „голый“ репозиторий в текущей папке. Этот новый "голый" репозитоий представляет из себя стартовый набор рабочих файлов и папок Git.'
    },
    {
      command: 'git init --bare [folder_name]',
      input: [
        'Имя папки'
      ],
      description: 'Создаётся новая папка с именем [input], а внутри этой папки создаётся „голый“ репозиторий. Он представляет из себя стартовый набор рабочих файлов и папок Git.'
    }
  ],
  gitStatus: [
    {
      command: 'git status',
      input: [],
      description: 'Показывает текущее состояние репозитория. Выводит список изменений и перечень файлов, которые ожидают коммита.'
    },
    {
      command: 'git status -s',
      input: [],
      description: 'Показывает текущее состояние репозитория. Выводит краткий список изменений и перечень файлов, которые ожидают коммита.'
    }
  ],
  gitAdd: [
    {
      command: 'git add',
      input: true,
      inputPlaceholder: 'Имя файла вместе с расширением, например main.js',
      descWithoutInput: 'Добавляет выбранный файл в index (индексирование выбранного файла). Подготовка файла для коммита.',
      descWithInput: 'Добавляет конкретный файл, имя которого вы ввели, в index (индексирование выбранного файла). Подготовка файла для коммита.'
    },
    {
      command: 'git add *.',
      input: true,
      splice: true,
      inputPlaceholder: 'Добавьте расширение файла, например sass',
      descWithoutInput: 'Добавляет файлы определённого типа в index (индексирование файлов определённого типа). Подготовка файлов для коммита.',
      descWithInput: 'Добавляет файлы того типа, который вы ввели, в index (индексирование файлов выбранного вами типа). Подготовка файлов для коммита.'
    },
    {
      command: 'git add .',
      input: false,
      descWithoutInput: 'Добавляет в index изменённые и новые файлы и убирает из index удаленные файлы. Подготовка всех изменённых файлов для коммита.'
    },
    {
      command: 'git add -A',
      input: false,
      descWithoutInput: 'Добавляет все файлы и папки текущей директории в index (индексирование всех файлов). Подготовка всех файлов для коммита.'
    },
    {
      command: 'git add -u',
      input: false,
      descWithoutInput: 'Добавляет только отслеживаемые файлы и папки текущей директории в index (индексирование отслеживаемых файлов). То есть добавляет в index только изменённые и удалённые файлы и папки, новые не трогает. Подготовить отслеживаемые файлы для коммита.'
    },
  ],
  gitCommit: [
    {
      command: 'git commit',
      input: false,
      descWithoutInput: 'Записать проиндексированные изменения в репозиторий. Текстовый комментарий обязателен, поэтому откроется редактор, выбранный по умолчанию. Напишите там своё сообщение и сохраните.'
    },
    {
      command: 'git commit -a',
      input: false,
      descWithoutInput: 'Перед выполнение коммита будут занесены в индекс все отслеживаемые файлы. Новые файлы не индексируются. Далее все проиндексированные изменения записываются в репозиторий. Текстовый комментарий обязателен, поэтому откроется редактор, выбранный по умолчанию. Напишите там своё сообщение и сохраните.'
    },
    {
      command: 'git commit -m',
      input: true,
      quote: '"',
      inputPlaceholder: 'Текст сообщения',
      descWithoutInput: 'Записать проиндексированные изменения в репозиторий. Текстовый комментарий обязателен, поэтому коммит будет проигнорирован, если сообщение пустое.',
      descWithInput: 'Записать проиндексированные изменения в репозиторий. Текстовый комментарий, который Вы написали, будет добавлен в команду.'
    },
    {
      command: 'git commit -a -m',
      input: true,
      quote: '"',
      inputPlaceholder: 'Текст сообщения',
      descWithoutInput: 'Перед выполнение коммита будут занесены в индекс все отслеживаемые файлы. Новые файлы не индексируются. Текстовый комментарий обязателен, поэтому коммит будет проигнорирован, если сообщение пустое.',
      descWithInput: 'Перед выполнение коммита будут занесены в индекс все отслеживаемые файлы. Новые файлы не индексируются. Текстовый комментарий, который Вы написали, будет добавлен в команду. Далее проиндексированные изменения записываются в репозиторий.'
    }
  ],
  gitHelp: [
    {
      command: 'git help [command]',
      input: [
        'Команда git, например, merge'
      ],
      description: 'В браузере откроется локальная страница с подробным описанием выбранной команды [input].'
    }
  ],
  gitConfig: [
    {
      command: 'git config --global user.name',
      input: [],
      description: 'Вывести имя пользователя, которое было задано ранее.'
    },
    {
      command: 'git config --global user.name [name]',
      input: [
        'Имя пользователя'
      ],
      description: 'Указать имя пользователя [input]. По этому имени можно будет отследить, кто выполнял коммиты.'
    },
    {
      command: 'git config --global user.email',
      input: [],
      description: 'Вывести электронную почту пользователя, которая была задана ранее.'
    },
    {
      command: 'git config --global user.email [email]',
      input: [
        'Электронная почта пользователя'
      ],
      description: 'Указать электронную почту пользователя [input]. Эта информация будет добавляться коммиты.'
    },
  ],
  gitBranch: [
    {
      command: 'git branch',
      input: [],
      description: 'Показать список веток в локальном репозитории. Текущая ветка будет выделена звёздочкой и цветом.'
    },
    {
      command: 'git branch -v',
      input: [],
      description: 'Показать в локальном репозитории список веток и последний коммит в каждой. Текущая ветка будет выделена звёздочкой и цветом.'
    },
    {
      command: 'git branch -a',
      input: [],
      description: 'Показать список веток в локальном и удалённом репозиториях. Текущая ветка в локальном репозитории будет выделена звёздочкой и цветом.'
    },
    {
      command: 'git branch -r',
      input: [],
      description: 'Показать список веток в удалённом репозитории.'
    },
    {
      command: 'git branch -d [old_branch]',
      input: [
        'Имя удаляемой ветки, например, old_branch'
      ],
      description: 'Удалить ветку [input]. Если эта ветка ещё не была слита с текущей веткой, то git предупредит об этом. Необходимо выполнить слияние с помощью git merge или выполнить с помощью команды git branch -D принудительное удаление без слияния с текущей веткой.'
    },
    {
      command: 'git branch -D [old_branch]',
      input: [
        'Имя удаляемой ветки, например, old_branch'
      ],
      description: 'Принудительно удалить ветку [input], даже если эта ветка ещё не была слита с текущей веткой.'
    },
    {
      command: 'git branch [new_branch]',
      input: [
        'Имя новой ветки, например, new_branch'
      ],
      description: 'Создать на текущем коммите новую ветку с указанным именем [input].'
    },
    {
      command: 'git branch [new_branch] [16fce82]',
      input: [
        'Имя новой ветки, например, new_branch',
        'Номер коммита, например, 16fce82'
      ],
      description: 'Создать новую ветку с указанным именем [input] на указанном коммите [input].'
    }
  ],
  gitCheckout: [
    {
      command: 'git checkout',
      input: [
        'Имя ветки'
      ],
      description: 'Перейти на указанную ветку [input]. Перед этим в текущей ветке необходимо сделать коммит, иначе смена ветки невозможна. После выполнения команды указатель перемещается на коммит выбранной новой ветки, а рабочая директория возвращается к состоянию на момент этого коммита.'
    },
    {
      command: 'git checkout -b',
      input: [
        'Имя ветки'
      ],
      description: 'Создать новую ветку с указанным именем [input] и перейти в неё. Перед этим в текущей ветке необходимо сделать коммит, иначе смена ветки невозможна.'
    }
  ],
  gitReset: [
    {
      command: 'git reset --hard [commit]',
      input: [
        'Хэш коммита, например, 92c68f9...'
      ],
      description: 'Принудительно возвращает к указанному коммиту [input], не сохраняя историю и изменения.'
    }
  ],
  gitMerge: [
    {
      command: 'git merge [branch]',
      input: [
        'Имя ветки, c которой происходит слияние'
      ],
      description: 'Влить в активную ветку (та, в которой находимся) изменения из ветки [input].'
    },
    {
      command: 'git mergetool',
      input: [],
      description: 'Запустить утилиту для слияния, которая прописана в конфигурации. Если утилита не сконфигурирована, то появится соответствующее предупреждение и предложение выбрать одну из нескольких.'
    },
    {
      command: 'git mergetool --tool-help',
      input: [],
      description: 'Покажет инструменты, которые могут быть выбраны в качестве инструмента для слияния. Часть инструментов может быть уже доступна для выбора. Другая часть инструментов в данный момент недоступна, но может быть дополнительно установлена.'
    },
    {
      command: 'git config --local merge.tool [tool]',
      input: [
        'Название утилиты, например, vimdiff'
      ],
      description: 'Указать имя утилиты [input], которой будут устраняться конфликты при слиянии веток. Настройка применяется для конкретного проекта.'
    },
    {
      command: 'git config --global merge.tool [tool]',
      input: [
        'Название утилиты, например, vimdiff'
      ],
      description: 'Глобально для данного пользователя указать имя утилиты [input], которой будут устраняться конфликты при слиянии веток.'
    }
  ],
  gitRemote: [
    {
      command: 'git remote',
      input: [],
      description: 'Посмотреть список доступных удалённых репозиториев.'
    },
    {
      command: 'git remote -v',
      input: [],
      description: 'Посмотреть детальный список доступных удалённых репозиториев.'
    },
    {
      command: 'git remote show',
      input: [
        'Имя репозитория'
      ],
      description: 'Получить данные об удалённом репозитории с сокращённым именем [input], которое Вы ввели.'
    },
    {
      command: 'git remote add',
      input: [
        'Имя репозитория',
        'URL репозитория'
      ],
      description: 'Добавляем удалённый пустой репозиторий, который был предварительно создан. Будем обращаться к нему по имени [input], которое Вы ввели. Располагается удалённый репозиторий по адресу [input], который Вы ввели.'
    }
  ],
  gitPush: [
    {
      command: 'git push',
      input: [
        'Имя репозитория, например, origin',
        'Имя ветки, например, master'
      ],
      description: 'Отправляет данные текущей ветви локального репозитория в удалённый репозиторий. Дополнительно можете указать имя [input] удалённого репозитория и его ветку [input]. Если не указывать никаких данных, то данные зальются на текущую ветку репозитория.'
    },
    {
      command: 'git push -u',
      input: [
        'Имя репозитория, например, origin',
        'Имя ветки, например, master'
      ],
      description: 'Отправляет данные текущей ветви локального репозитория в удалённый репозиторий. Дополнительно можете указать имя [input] удалённого репозитория и его ветку [input]. Если удалённая ветка не установлена как отслеживаемая, то сделать её такой.'
    }
  ],
  gitClone: [
    {
      command: 'git clone [URL]',
      input: [
        'URL репозитория'
      ],
      description: 'Клонировать к себе удалённый репозиторий, расположенный по указанному адресу [input]. Клонирование происходит в одноимённую директорию.'
    },
    {
      command: 'git clone [URL] [repo_name]',
      input: [
        'URL репозитория',
        'Имя папки'
      ],
      description: 'Клонировать к себе удалённый репозиторий, расположенный по указанному адресу [input]. Клонирование выполнится в папку с именем [input], которое Вы указали.'
    }
  ],
  gitPull: [
    {
      command: 'git pull',
      input: [],
      description: 'Притянуть (залить) к себе историю и изменения с удалённого репозитория и произвести слияние. Так как не указаны параметры, то слияние происходит с репозиторием и текущей веткой.'
    },
    {
      command: 'git pull [repo_name] [branch_name]',
      input: [
        'Имя репозитория',
        'Имя ветки'
      ],
      description: 'Притянуть (залить) к себе историю и изменения с удалённого репозитория и произвести слияние. Слияние происходит с удалённым репозиторием [input] с веткой [input].'
    }
  ]
}

/* GET commands */
router.get('/', function(req, res, next) {
  res.json(data)
  console.log('Object is sent')
})

module.exports = router